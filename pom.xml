<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

	<groupId>org.springframework</groupId>
    <artifactId>gs-spring-boot</artifactId>
    <version>0.1.0</version>
    
	    <parent>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-starter-parent</artifactId>
	        <version>2.0.3.RELEASE</version>
	    </parent>
	    
		<!-- I don't think this section is doing anything useful -->
		<distributionManagement>
		  <repository>
		    <id>thirdparty</id>
		    <url>http://10.0.1.153:8081/nexus/content/repositories/thirdparty</url>
		  </repository>
		</distributionManagement>
	
	

    
    <!-- new 7/18 -->
   	<ciManagement>
	    <system>jenkins</system>
	    <url>http://jenkins.gcnp.local:8080/</url>
	</ciManagement>

    <properties>    
    
    	<!-- new
    	 <spring.version>3.0.5.RELEASE</spring.version> -->
    	
    	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    
        <java.version>1.8</java.version>
      	<!--  This format is used by SonarQube. If you need another format see "buildnumber-maven-plugin" -->
		<maven.build.timestamp.format>MM.yyyy</maven.build.timestamp.format>
		<yearMonth>${maven.build.timestamp}</yearMonth>    
		<!-- ************************-->
		<!-- Sonar/Reporting settings -->
		<!-- ************************-->
		<!-- Sonar/Jacoco integration. Note that these properties need to be defined outside the "coverage" profile
		because we want to be to able to execute mvn sonar:sonar without passing a profile -->
		<!-- Tells Sonar to use jacoco for coverage results -->
		<sonar.projectKey>MyProjectKey</sonar.projectKey>
		<sonar.projectName>My Project</sonar.projectName>
		 <sonar.projectVersion>${yearMonth}</sonar.projectVersion>
		<sonar.language>java</sonar.language>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<!-- Jacoco version to use -->
		<jacoco.version>0.7.2.201409121644</jacoco.version>
		<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per test -->
		<sonar-jacoco-listeners.version>1.4</sonar-jacoco-listeners.version>
		<!-- Don't let Sonar execute tests. We will ask it to Maven 'sonar.dynamicAnalysis' is deprecated since version 4.3 and should no longer be used. -->
		<!-- <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis> -->
		<!-- The system property jacoco.outputDir needs to be override on the command line
		    with an absolute path if you want to merge results from all modules.
		    Example in a Jenkisn build where ${WORKSPACE} is defined and your project in the root directory of the workspace :
		    mvn clean install -Prun-its,coverage -Djacoco.outputDir=${WORKSPACE}/target
		    Note that unfortunately using the following does not work because of
		    http://jira.codehaus.org/browse/SONAR-3427:
		<jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir>
		-->
		<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
		<!-- Jacoco output file for UTs -->
		<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Unit Tests -->
		<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
		<!-- Jacoco output file for ITs -->
		<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Integration Tests -->
		<sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>
		<!-- <sonar.junit.reportsPath>${project.build.directory}/surefire-reports/</sonar.junit.reportsPath> -->
		<!-- <sonar.tests>src/test/java</sonar.tests> -->
		<!-- === END of Sonar/Reporting settings === -->
    </properties>
    
    
    <!-- new 7/18 -->
   <repositories>
  <repository>
    <id>releases</id>
    <url>http://10.0.1.153:8081/nexus/content/repositories/releases</url>
  </repository>
  </repositories>
  
      <dependencies>
    	<!-- new 7/18 
    	 <dependency>
		      <groupId>com.foobar.templates</groupId>
		      <artifactId>maventemplate-ear</artifactId>
		      <version>1.0.0</version>
		      <type>ear</type>
		 </dependency>-->

    	
   
        <dependency>
            <groupId>org.codehaus.sonar-plugins.java</groupId>
            <artifactId>sonar-jacoco-listeners</artifactId>
            <version>${sonar-jacoco-listeners.version}</version>
            <scope>test</scope>
        </dependency>
		<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- tag::actuator[] -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- end::actuator[] -->
        <!-- tag::tests[] -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- end::tests[] -->
       
       <!-- new
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jbundle.util</groupId>
			<artifactId>org.jbundle.util.jbackup</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>net.sf.webtestfixtures</groupId>
			<artifactId>webtestfixtures</artifactId>
			<version>2.0.1.3</version>
		</dependency>
		<dependency>
			<groupId>org.shoal</groupId>
			<artifactId>shoal-gms-api</artifactId>
			<version>1.5.8</version>
		</dependency>
		<dependency>
			<groupId>org.ow2.util</groupId>
			<artifactId>util-i18n</artifactId>
			<version>1.0.22</version>
		</dependency>
		<dependency>
			<groupId>com.sun.grizzly</groupId>
			<artifactId>grizzly-lzma</artifactId>
			<version>1.9.19-beta5</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.sonar</groupId>
			<artifactId>sonar-squid</artifactId>
			<version>2.9</version>
		</dependency>
		<dependency>
			<groupId>org.graniteds</groupId>
			<artifactId>granite-openjpa</artifactId>
			<version>2.2.0.SP1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-util</artifactId>
			<version>7.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-http</artifactId>
			<version>2.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.struts.xwork</groupId>
			<artifactId>xwork-core</artifactId>
			<version>2.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.jruby</groupId>
			<artifactId>jruby-complete</artifactId>
			<version>1.1RC1</version>
		</dependency>
		<dependency>
			<groupId>org.jruby</groupId>
			<artifactId>jruby</artifactId>
			<version>1.6.3</version>
		</dependency>
		<dependency>
			<groupId>org.mortbay.jetty</groupId>
			<artifactId>jetty</artifactId>
			<version>6.1.16</version>
		</dependency>
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
			<version>10.1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.1.1.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>com.google.code.facebookapi</groupId>
			<artifactId>facebook-java-api</artifactId>
			<version>3.0.4</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>12.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava-gwt</artifactId>
			<version>12.0</version>
		</dependency>
		<dependency>
			<groupId>biz.littlej.jreqs</groupId>
			<artifactId>jreqs-guava</artifactId>
			<version>0.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.sisu</groupId>
			<artifactId>sisu-ehcache</artifactId>
			<version>1.1</version>
		</dependency>
		<dependency>
			<groupId>org.sonatype.sisu</groupId>
			<artifactId>sisu-xmlrpc-client</artifactId>
			<version>1.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode</groupId>
			<artifactId>kiama_2.8.1</artifactId>
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.googlecode</groupId>
			<artifactId>jyield</artifactId>
			<version>0.0.6</version>
		    </dependency> -->
    </dependencies>
   
    <build>
        <plugins>
        	<plugin>
			   <groupId>org.apache.maven.plugins</groupId>
			   <artifactId>maven-deploy-plugin</artifactId>
			   <configuration>
			      <skip>true</skip>
			   </configuration>
			</plugin>
			<!-- added this plugin back in to try to connect to nexus 7/18 -->
			<plugin>
			    <groupId>org.sonatype.plugins</groupId>
			    <artifactId>nexus-staging-maven-plugin</artifactId>
			    <version>1.5.1</version>
			    <executions>
			      <execution>
			         <id>default-deploy</id>
			         <phase>deploy</phase>
			         <goals>
			            <goal>deploy</goal>
			         </goals>
			      </execution>
			    </executions>
			    <configuration>
			      <serverId>nexus</serverId>
			      <nexusUrl>http://10.0.1.153:8081/nexus/</nexusUrl>
			      <skipStaging>true</skipStaging>
			    </configuration>
			 </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>${jacoco.agent.ut.arg}</argLine>
                    <!-- Specific to generate mapping between tests and covered code -->
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>org.sonar.java.jacoco.JUnitListener</value>
                        </property>
                    </properties>
                    <!-- test failure ignore -->
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}
                    </argLine>
                    <!-- Specific to generate mapping between tests and covered code -->
                    <properties>
                        <property>
                            <name>listener</name>
                            <value>org.sonar.java.jacoco.JUnitListener</value>
                        </property>
                    </properties>
                    <!-- Let's put failsafe reports with surefire to have access to tests 
                        failures/success reports in sonar -->
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info 
                        to be passed to the JVM hosting the code being tested. -->
                    <execution>
                        <id>prepare-ut-agent</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.reportPath}</destFile>
                            <propertyName>jacoco.agent.ut.arg</propertyName>
                            <append>true</append>
                        </configuration>
                    </execution>
                    <!-- Prepares a variable, jacoco.agent.it.arg, that contains the info 
                        to be passed to the JVM hosting the code being tested. -->
                    <execution>
                        <id>prepare-it-agent</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${sonar.jacoco.itReportPath}</destFile>
                            <propertyName>jacoco.agent.it.arg</propertyName>
                            <append>true</append>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
      			<groupId>org.sonarsource.scanner.maven</groupId>
			    <artifactId>sonar-maven-plugin</artifactId>
			    <version>3.4.0.905</version>
			</plugin>
			
			<!-- new
			<plugin>
		        <artifactId>maven-site-plugin</artifactId>
		        <version>3.4</version>
		        <dependencies>
		          <dependency>
		            <groupId>org.apache.maven.wagon</groupId>
		            <artifactId>wagon-webdav-jackrabbit</artifactId>
		            <version>2.8</version>
		          </dependency>
		        </dependencies>
		        <configuration>
		          <locales>en,fr</locales>
		        </configuration>
		      </plugin> -->
		      
		  	<!-- new 7/18 trying to download from nexus repository -->
		  	<plugin>
		        <artifactId>maven-antrun-plugin</artifactId>
		        <version>1.7</version>
		        <executions>
		          <execution>
		            <!--  <phase>compile</phase>  -->
		            <configuration>
		              <target>
		                <!-- dump all available properties -->
		                <echoproperties />
		                <exec dir="." executable="cmd" osfamily="windows">
		                  <arg value="/c"/>
		                  <arg value="deploy.cmd ${maven.dependency.com.foobar.templates.maventemplate-ear.ear.path} ${environment} ${distversion}"/>
		                </exec>
		                <exec dir="." executable="/bin/bash" osfamily="unix">
		                  <arg value="-c"/>
		                  <arg value="./deploy.sh ${maven.dependency.com.foobar.templates.maventemplate-ear.ear.path} ${environment} ${distversion}"/>
		                </exec>
		              </target>
		            </configuration>
		            <goals>
		              <goal>run</goal>
		            </goals>
		          </execution>
		        </executions>
		      </plugin>
		      
		      <!-- new 7/18 attempt to download from nexus, must run as mvn install-->
		      <!-- <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.springframework</groupId>
                                    <artifactId>gs-spring-boot</artifactId>
                                    <version>0.1.0</version>
                                    <type>jar</type>
                                    <outputDirectory>target</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>   -->
            
        </plugins>
        </build>

</project>
